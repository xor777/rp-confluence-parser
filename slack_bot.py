import os
import logging
from slack_bolt import App
from slack_bolt.adapter.socket_mode import SocketModeHandler
from dotenv import load_dotenv
from knowledge_base import KnowledgeBase, Constants
from datetime import datetime

logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)
logging.getLogger("slack_bolt").setLevel(logging.WARNING)

load_dotenv()

class SlackBot:
    def __init__(self):
        self.bot_token = os.getenv('SLACK_BOT_TOKEN')
        if not self.bot_token:
            raise ValueError("SLACK_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            
        self.app_token = os.getenv('SLACK_APP_TOKEN')
        if not self.app_token:
            raise ValueError("SLACK_APP_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            
        self.app = App(token=self.bot_token)
        self.kb = KnowledgeBase()
        
        logger.info("–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Slack –±–æ—Ç–∞...")
        self.setup_handlers()
        logger.info("–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    def setup_handlers(self):
        @self.app.event("app_mention")
        def handle_mention(event, say):
            logger.info(f"—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {event}")
            text = event['text']
            bot_user_id = self.app.client.auth_test()["user_id"]
            mention_pattern = f"<@{bot_user_id}>"
            question = text.replace(mention_pattern, '').strip()
            
            message_ts = event['ts']
            thread_ts = event.get('thread_ts', message_ts)
            
            logger.info(f"–≤–æ–ø—Ä–æ—Å: '{question}' –≤ —Ç—Ä–µ–¥–µ: {thread_ts}, message_ts: {message_ts}")
            
            answer = self.get_answer_for_question(
                question, 
                event['channel'], 
                message_ts,
                thread_ts
            )
            
            say(
                text=answer, 
                thread_ts=thread_ts,
                parse='mrkdwn'
            )
            logger.info("–æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
        @self.app.event("message")
        def handle_direct_message(event, say):
            logger.info(f"—Å–æ–æ–±—â–µ–Ω–∏–µ: {event}")
            
            if event.get('bot_id'):
                logger.info("–ø—Ä–æ–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞")
                return
                
            if event.get('channel_type') != 'im':
                logger.info("–ø—Ä–æ–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∏–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞")
                return
            
            question = event['text'].strip()
            message_ts = event['ts']
            logger.info(f"–≤–æ–ø—Ä–æ—Å –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ: '{question}' —Å message_ts: {message_ts}")
            
            answer = self.get_answer_for_question(
                question, 
                event['channel'],
                message_ts
            )
            
            say(
                text=answer,
                parse='mrkdwn'
            )
            logger.info("–æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
        @self.app.command("/ask")
        def handle_slash_command(ack, body, say):
            logger.info(f"–ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {body}")
            ack()
            
            question = body['text'].strip()
            message_ts = body['command_ts']
            thread_ts = body.get('thread_ts', message_ts)
            
            logger.info(f"–∫–æ–º–∞–Ω–¥–∞: '{question}' –≤ —Ç—Ä–µ–¥–µ: {thread_ts}, message_ts: {message_ts}")
            
            answer = self.get_answer_for_question(
                question, 
                body['channel_id'], 
                message_ts,
                thread_ts
            )
            
            say(
                text=answer,
                thread_ts=thread_ts,
                parse='mrkdwn'
            )
            logger.info("–æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    
    def send_typing_indicator(self, channel: str, message_ts: str = None):
        try:
            if message_ts:
                logger.info(f"üëÄ –≤ –∫–∞–Ω–∞–ª–µ {channel} –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {message_ts}")
                self.app.client.reactions_add(
                    channel=channel,
                    timestamp=message_ts,
                    name="eyes"
                )
                logger.info("üëÄ –¥–æ–±–∞–≤–ª–µ–Ω")
            else:
                logger.info("message_ts –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–∫—Ü–∏—é")
        except Exception as e:
            logger.error(f"–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏: {str(e)}", exc_info=True)
    
    def get_answer_for_question(self, question: str, channel: str, message_ts: str = None, thread_ts: str = None) -> str:
        if not question:
            logger.info("–ø—É—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å, –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return Constants.WELCOME_MESSAGE
            
        logger.info(f"–ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: '{question}' –≤ –∫–∞–Ω–∞–ª–µ: {channel}, message_ts: {message_ts}, thread_ts: {thread_ts}")
        
        try:
            self.send_typing_indicator(channel, message_ts)
            answer = self.kb.get_answer(question)
            logger.info("–æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
            return answer
        except Exception as e:
            logger.error(f"–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {str(e)}", exc_info=True)
            return Constants.TECHNICAL_ERROR_MESSAGE
    
    def run(self):
        logger.info("–∑–∞–ø—É—Å–∫ slack –±–æ—Ç–∞...")
        try:
            handler = SocketModeHandler(self.app, self.app_token)
            handler.start()
            logger.info("–±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logger.error(f"–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å slack –±–æ—Ç: {str(e)}")
            raise

def main():
    try:
        bot = SlackBot()
        bot.run()
    except Exception as e:
        logger.error(f"–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
        raise

if __name__ == "__main__":
    main() 